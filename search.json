[{"path":"https://timeddilation.github.io/connectapi.dag/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Tyler Neumann Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/articles/connect-tasks.html","id":"programmatically-run-tasks","dir":"Articles","previous_headings":"","what":"Programmatically Run Tasks","title":"Connect Tasks","text":"jump full orchestration, let’s start simple. Let’s start single task runs conditionally. Normally, connect tasks created providing content guid first parameter connect_task function. walk , ’ll use simulated tasks instead, give human-friendly names simplicity’s sake. task defined, can now simply call task_run function execute task. may envoked existing job, Shiny application, API.","code":"library(connectapi.dag) notify_task <- connect_task(\"email_stakeholder\", simulated = TRUE) some_condition <- TRUE if (some_condition) task_run(notify_task, verbose = TRUE) #> Starting task email_stakeholder #> Task Succeeded"},{"path":"https://timeddilation.github.io/connectapi.dag/articles/connect-tasks.html","id":"statuses","dir":"Articles","previous_headings":"","what":"Statuses","title":"Connect Tasks","text":"connect tasks status. may accessed directly: 4 possible statuses task may . Pending: Task run yet Succeeded: Task ran successfully without error Failed: Task encountered error Skipped: Task meet criteria run completed evaluation. newly created tasks start Pending status. task ran using task_run function, may stop terminal statuses; Succeeded, Failed, Skipped. terminal, attempting call task_run function result error. happy path, tasks Succeeded status evaluation. error encountered running task, task Failed status. preconditions task met (defined trigger_rule parameter) Skipped. terminal statuses count completing evaluation purposes Trigger rules.","code":"notify_task$status #> [1] \"Succeeded\""},{"path":"https://timeddilation.github.io/connectapi.dag/articles/connect-tasks.html","id":"dependency-chains","dir":"Articles","previous_headings":"","what":"Dependency Chains","title":"Connect Tasks","text":"Dependency chains foundation DAGs package. Almost heavy lifting orchestrating DAGs actually defined tasks. even simple data pipelines, may decompose steps analysis three general steps; extract, transform, load. Loading usually means storing data, may also final product presentation. Let’s consider notify stakeholder task. task triggered analysis complete ready view. analysis task dependency notify stakeholder task. Therefore, want ensure analysis task completed attempt run notify stakeholder task. becomes necessary define task dependency chain. tasks must occur run? preconditions tasks run? tasks occur run? Tho define dependency chains, package offers functions set_upstream set_downstream define dependency (run ) tasks dependent (run ) tasks respectively. Now, notify stakeholder task run analysis task complete. can visualize dependency chain using plot tasks. Note plot function task show immediate dependencies dependents.  Dependency chains may grow exceptionally complexity. package offers simplified interface express dependency chains ensure consistency.","code":"analysis_task <- connect_task(\"analysis\", simulated = TRUE)  notify_task |> set_upstream(analysis_task) plot(notify_task) extract_task <- connect_task(\"extract\", simulated = TRUE) analysis_task <- connect_task(\"analysis\", simulated = TRUE) notify_task <- connect_task(\"email_stakeholder\", simulated = TRUE) model_task <- connect_task(\"train_model\", simulated = TRUE)  analysis_task |>   set_upstream(extract_task) |>   set_downstream(notify_task, model_task)  plot(analysis_task)"},{"path":"https://timeddilation.github.io/connectapi.dag/articles/connect-tasks.html","id":"extending-dependency-chains","dir":"Articles","previous_headings":"Dependency Chains","what":"Extending Dependency Chains","title":"Connect Tasks","text":"Dependency chiains need one-hop away. Dependency chains may extended tree depth, orchestrated using Connect DAGs packache. However, plotting single task display immediate (one-hop) links. example, may final task modelling task complete update model hosted plumber API.  Notice plot Model Task include extract notify task. plotting DAGs display full dependency chain. Refer Connect DAGs vignette details.","code":"reload_api_model <- connect_task(\"deploy_model\", simulated = TRUE) reload_api_model |> set_upstream(model_task)  plot(model_task) my_dag <- connect_dag(extract_task, analysis_task, notify_task,                       model_task, reload_api_model)  plot(my_dag, plotly = FALSE)"},{"path":"https://timeddilation.github.io/connectapi.dag/articles/connect-tasks.html","id":"trigger-rules","dir":"Articles","previous_headings":"","what":"Trigger Rules","title":"Connect Tasks","text":"many cases, conditions want ensure met regarding upstream tasks. cases, want ensure upstream task(s) completed successfully executing. However, many possible situations appropriate run task. Trigger Rules comes . allow control upstream scenarios acceptable precondition running. following trigger rules provided: all_success: upstream tasks executed successfully. all_failed: upstream tasks failed execution. all_skipped: upstream tasks skipped execution. all_done: upstream tasks completed evaluation. includes skipped tasks. one_success: least one upstream task executed successfully. one_failed: least one upstream task failed execution. one_done: least one upstream task completed evaluation. includes skipped tasks. none_failed: upstream tasks failed. upstream tasks completed evaluation. none_skipped: upstream tasks skipped. upstream tasks completed evaluation. always: Task always run regardless upstream task statuses. default, tasks use all_success trigger rule. may changed defining task. example, maybe need notify data provider issue extraction step.  Now, run notify vendor task failure extraction step. Otherwise, skipped.","code":"notify_vendor <- connect_task(   \"notify_vendor\",   trigger_rule = \"all_failed\",   simulated = TRUE ) |> set_upstream(extract_task)  plot(extract_task)"},{"path":"https://timeddilation.github.io/connectapi.dag/articles/connect-tasks.html","id":"connect-validation","dir":"Articles","previous_headings":"","what":"Connect Validation","title":"Connect Tasks","text":"Note: examples use simulated = TRUE parameter tasks skip validation real Posit Connect server. actual usage, value FALSE (default) instead. defining Connect Task, must specify content guid, access details Connect Server. Access details identical required connectapi::connect(), used hood. importantly, using environment variables manage access details. highly recommended use following environment variable, default expected package, well connectapi pins. course, may define options parameters desire. using non-simulated tasks, name task title content Connect.","code":"CONNECT_SERVER = https://connect.example.com CONNECT_API_KEY = your-api-key task0 <- connect_task(\"be4e0fe3-ab35-4f07-bc8e-cd5d4a7b8452\", simulated = TRUE) task0 <- connect_task(   \"be4e0fe3-ab35-4f07-bc8e-cd5d4a7b8452\",   server = Sys.getenv(\"CONNECT_HOST\"),   api_key = Sys.getenv(\"CONNECT_KEY\"),   simulated = TRUE )  task0 #> ConnectTask:  #>   GUID: simulated_be4e0fe3-ab35-4f07-bc8e-cd5d4a7b8452  #>   Name: be4e0fe3-ab35-4f07-bc8e-cd5d4a7b8452  #>   Trigger Rule: all_success  #>   App Mode: simulation  #>   Status: Pending  #>   Upstream Tasks: 0  #>   Downstream Tasks: 0"},{"path":"https://timeddilation.github.io/connectapi.dag/articles/connect-tasks.html","id":"multiple-servers","dir":"Articles","previous_headings":"Connect Validation","what":"Multiple Servers","title":"Connect Tasks","text":"perfectly valid single DAG run tasks hosted separate servers. long appropriate credentials passed defining DAG, may use number separate servers /API keys tasks.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/articles/connect-tasks.html","id":"simulated-tasks","dir":"Articles","previous_headings":"","what":"Simulated Tasks","title":"Connect Tasks","text":"Simulated tasks Connect Task environments make attempt communicate Connect Server. therefore skip validation server assume guid provided also name task. two ways create simulated tasks. simplest way use simulated = TRUE parameter calling connect_task(). Tasks created way also immediately evaluate Succeeded run task_run() . second way use sim_task() function. function Connect access parameters, adds additional parameter called fail_prob. new parameter allows define random chance task fail. value set 0 1, 0 always fail, 1 always succeed. Tasks random chance fail useful want see various scenarios DAG run. Outside use case, however, otherwise useless.","code":"connect_sim <- sim_task(\"some_task\", fail_prob = 0.5)"},{"path":"https://timeddilation.github.io/connectapi.dag/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tyler Neumann. Maintainer.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Neumann T (2023). connectapi.dag: Task Orchestration Posit Connect. R package version 0.1.3, https://timeddilation.github.io/connectapi.dag/.","code":"@Manual{,   title = {connectapi.dag: Task Orchestration for Posit Connect},   author = {Tyler Neumann},   year = {2023},   note = {R package version 0.1.3},   url = {https://timeddilation.github.io/connectapi.dag/}, }"},{"path":"https://timeddilation.github.io/connectapi.dag/index.html","id":"connectapidag","dir":"","previous_headings":"","what":"Task Orchestration for Posit Connect","title":"Task Orchestration for Posit Connect","text":"package allows creation DAGs, inspired Apache Airflow, content items published Posit Connect. leverages existing connectapi package make API calls Posit Server, adds syntax similar Airflow’s python package defining DAGs. DAG collection linked tasks, organized dependencies relationships describe rules run. main benefit using package manage many rendering schedules Posit Connect. may often find jobs dependent another job, creating one two hour offsets schedules ensure completion one . can lead many issues data pipelines, especially dependency task fails may want dependent tasks run .","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Task Orchestration for Posit Connect","text":"package relies entirely connectapi interact Posit Connect Server, disclaimers package states applicable well. connectapi package experimental.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Task Orchestration for Posit Connect","text":"package currently available CRAN. install development version:","code":"devtools::install_github(\"timeddilation/connectapi.dag\")"},{"path":"https://timeddilation.github.io/connectapi.dag/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Task Orchestration for Posit Connect","text":"starting , highly recommended familiarize connectapi briefly. important aspect understand client created. default, package looks environment variables containing secrets required connect Posit Connect server. highly recommended use exact environment variables authentication, used connectapi pins. basics figured connectapi, can create connect client using connectapi::connect() can start defining tasks DAGs. Secondly, suggested familiarize pins. Specifically, package uses pins::board_connect() hood managing DAG deployments Posit Connect. Although, required use package’s built-features DAG deployments, can whatever want DAG environment defined. order use defaults environment variables, pins V >= 1.1.0 required.","code":"CONNECT_SERVER = https://connect.example.com CONNECT_API_KEY = your-api-key"},{"path":"https://timeddilation.github.io/connectapi.dag/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Task Orchestration for Posit Connect","text":"Create deploy DAGs orchestrate scheduled jobs Posit Connect 4 steps: Define Tasks dependency chains Define DAG collection tasks Store DAG persistent storage using pins Schedule DAG run, remove schedules individual tasks Open created Rmd file click deploy Connect!","code":"library(connectapi.dag)  # Define Tasks # Use `simulated = TRUE` to skip Posit Validation # Real Connect Tasks must be defined with `simulated = FALSE` (the default) task0 <- connect_task(\"guid-0\", simulated = TRUE) task1 <- connect_task(\"guid-1\", simulated = TRUE) task2 <- connect_task(\"guid-2\", simulated = TRUE) task3 <- connect_task(\"guid-3\", simulated = TRUE) task4 <- connect_task(\"guid-4\", trigger_rule = \"one_success\", simulated = TRUE)  # define dependency chain task1 |>   set_upstream(task0) |>   set_downstream(task2, task3)  task4 |>   set_upstream(task2, task3)  # create the DAG my_dag <-   connect_dag() |>   dag_add_tasks(task0, task1, task2, task3, task4) |>   dag_set_name(\"simulated_dag\") |>   dag_validate()  # save the DAG to Posit Connect as a pin dag_write_connect_pin(my_dag)  # create a deployment Rmd to read the DAG from storage and execute dag_write_rmd(my_dag)"},{"path":[]},{"path":"https://timeddilation.github.io/connectapi.dag/index.html","id":"tasks","dir":"","previous_headings":"Details","what":"Tasks","title":"Task Orchestration for Posit Connect","text":"fundamental part creating DAG define tasks want included DAG. tasks created specifying GUID content item published Posit Connect server, option trigger_rule follow. default, trigger_rule all_success, meaning predecessor tasks completed successfully. View man page connect_task function list available trigger rules. task predecessors, always run. connect_task function returns R6 environment manages state task.","code":"task0 <- connect_task(\"4af62803-c9aa-45f4-8336-0ea7bbdd9334\") task1 <- connect_task(\"711b8c7a-97ef-4343-9e55-0d4d426ebf59\") task2 <- connect_task(\"eda729a2-e3f1-4063-b606-e52d01e9aa23\")"},{"path":"https://timeddilation.github.io/connectapi.dag/index.html","id":"task-dependencies","dir":"","previous_headings":"Details > Tasks","what":"Task Dependencies","title":"Task Orchestration for Posit Connect","text":"Two functions provided create dependencies: set_upstream() set_downstream(). functions, may accept number tasks set dependencies. example, following make task1 task2 dependent task0 completing. can visualize task’s immediate dependencies dependents plotting :","code":"task0 |>   set_downstream(task1, task2) plot(task0)"},{"path":"https://timeddilation.github.io/connectapi.dag/index.html","id":"simulated-tasks","dir":"","previous_headings":"Details > Tasks","what":"Simulated Tasks","title":"Task Orchestration for Posit Connect","text":"simple happy-path testing, may use simulated = TRUE parameter connect_task() function. Simulated tasks created way always run successfully skip validation Posit Connect. test happens failure scenarios, may instead use sim_task() function. function also creates simulated ConnectTask environment, allows specify probability failure. gives great way visualize happens failure scenarios.","code":"sim_task0 <- sim_task(\"guid-0\", fail_prob = 0) sim_task1 <- sim_task(\"guid-1\", fail_prob = 0) sim_task2 <- sim_task(\"guid-2\", fail_prob = 0.2) sim_task3 <- sim_task(\"guid-3\", fail_prob = 1) sim_task4 <- sim_task(\"guid-4\", trigger_rule = \"one_success\", fail_prob = 0)  # define dependency chain sim_task1 |>   set_upstream(sim_task0) |>   set_downstream(sim_task2, sim_task3)  sim_task4 |>   set_upstream(sim_task2, sim_task3)  sim_dag <-   connect_dag(sim_task0, sim_task1, sim_task2, sim_task3, sim_task4) |>   dag_validate() |>   dag_run()  plot(sim_dag)"},{"path":"https://timeddilation.github.io/connectapi.dag/index.html","id":"dags","dir":"","previous_headings":"Details","what":"DAGs","title":"Task Orchestration for Posit Connect","text":"tasks defined, may add DAG R6 environment. object validate tasks fact linked DAG. may create task dependencies creating DAG. Note: tasks linked dependency chain must added DAG. DAG validate detects task dependency link, task added DAG. DAG object created, can check validity DAG. issues found, message return console invalid. recommended always run dag_validate DAG storing trying execute . DAG executed, check validity raise error DAG invalid. may also plot DAG. default, plot() method DAG create plotly graph. may plot DAG even DAG invalid. can useful troubleshooting circular references, islands, issues DAG.","code":"my_dag <- connect_dag(task0, task1, task2, name = \"my_dag\") dag_validate(my_dag) plot(my_dag)"},{"path":"https://timeddilation.github.io/connectapi.dag/index.html","id":"running-dags","dir":"","previous_headings":"Details","what":"Running DAGs","title":"Task Orchestration for Posit Connect","text":"valid DAG, can run simply dag_run function. Calling local environment execute tasks DAG. However, yet schedule DAG whole. Keep reading deployment options. ran, can plot() DAG show task statuses. Tasks 3 possible statuses DAG runs; Succeeded, Failed, Skipped. task skipped ’s trigger_rule requirement met. ever run issues executing DAG, may useful plot DAG see issue arrised.","code":"dag_run(my_dag)"},{"path":"https://timeddilation.github.io/connectapi.dag/index.html","id":"storing-dags","dir":"","previous_headings":"Details","what":"Storing DAGs","title":"Task Orchestration for Posit Connect","text":"DAG defined, want save persistent storage can later retrieve run . can use method want portion, can simply save DAG environment saveRDS. instance, want use S3 persistent storage versioning, can use paws.storage package instead. , can save DAG RDS object project’s repository, include bundle publish Posit Connect. However, since package explicitly Posit Connect, integration use Posit Connect persistent storage pins package already built-. dag_write_connect_pin() function handles work . DAG environment pin_name attribute, can changed dag_set_pin_name() function.","code":"dag_write_connect_pin(my_dag)"},{"path":"https://timeddilation.github.io/connectapi.dag/index.html","id":"scheduling-dags","dir":"","previous_headings":"Details","what":"Scheduling DAGs","title":"Task Orchestration for Posit Connect","text":"Scheduling DAG works way scheduling job Posit Connect. must publish bundle can rendered (Rmd, quarto, jupyter, etc.) read DAG environment call run_dag() method . package simplifies process ’re also using pins Connect persistent storage. saving DAG Connect using pins, can use dag_write_rmd() function generate Rmd file needed execute schedule DAG. Note function requires original DAG environment. DAG contains name pin Posit Connect. function first validate pin exists Posit Connect Server. validated, compose entire job can publish schedule. published scheduled, can remove schedules existing tasks within DAG. Part defaults job save DAG , overwriting versioning existing DAG. imperative DAG’s pin_name identical pin reading. job reads DAG, first reset DAG using dag_reset(), resets task statuses DAG’s internal state. allows log previous DAG runs, tasks succeeded, failed, skipped. planned future introduce functions tools read previous versions DAGs view tasks states prior runs allow investigation issues, possibly ability re-run specific tasks.","code":"dag_write_rmd(my_dag)"},{"path":"https://timeddilation.github.io/connectapi.dag/index.html","id":"other-notes","dir":"","previous_headings":"","what":"Other Notes","title":"Task Orchestration for Posit Connect","text":"Tasks DAG runs follow settings created tasks. instance, email failure still occur task render fails. DAG job raise errors task fails, expects tasks might fail.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/index.html","id":"future-plans","dir":"","previous_headings":"","what":"Future Plans","title":"Task Orchestration for Posit Connect","text":"Shiny application may built list published DAGs, view history DAG executions, plot , re-run , provide administration features. shiny app may ran locally, workbench, deployed app Posit Connect. Currently, tasks DAG run concurrently, even possible running multiple tasks time. major optimization can made, requires lot thought planning execute correctly give user proper control behavior. tool becomes mature, kind feature added.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":null,"dir":"Reference","previous_headings":"","what":"Class representing a DAG of Connect Tasks — ConnectDAG","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"Class representing DAG Connect Tasks Class representing DAG Connect Tasks","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"","code":"dag <- ConnectDAG$new(name = \"dag\")"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"class requires ConnectTasks added , linked dependency chain. tasks added, tasks' graph unioned DAG's graph. can validated ensure fact Directed Acyclic Graph. validated, DAG can orchestrate tasks Posit Connect.","code":""},{"path":[]},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"name user-defined name DAG. Useful organizing multiple DAGs. pin_name name pin Connect DAG saved. tasks list ConnectTasks DAG orchestrating. dag_graph igraph object linked tasks DAG is_valid Indicates tasks' dependency chain forms proper DAG. MODIFY DIRECTLY! run_id UUID created instance DAG run run_start time DAG run started run_end time DAG run ended is_complete Indicates tasks DAG evaluated execution.","code":""},{"path":[]},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"ConnectDAG$new() ConnectDAG$print() ConnectDAG$add_task() ConnectDAG$remove_task() ConnectDAG$set_name() ConnectDAG$set_connect_pin_name() ConnectDAG$plot() ConnectDAG$task_attrs() ConnectDAG$tasks_as_df() ConnectDAG$execute() ConnectDAG$reset() ConnectDAG$evaluate_validity() ConnectDAG$clone()","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"Initializes new ConnectDAG","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"","code":"ConnectDAG$new(name = \"new_dag\", ...)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"name personalized name DAG ... Connect Tasks add graph","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"Displays summary environment console.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"","code":"ConnectDAG$print()"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"method-add-task-","dir":"Reference","previous_headings":"","what":"Method add_task()","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"Adds ConnectTask DAG","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"","code":"ConnectDAG$add_task(task)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"task ConnectTask R6 environment","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"method-remove-task-","dir":"Reference","previous_headings":"","what":"Method remove_task()","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"Removes ConnectTask DAG","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"","code":"ConnectDAG$remove_task(task)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"task ConnectTask R6 environment","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"method-set-name-","dir":"Reference","previous_headings":"","what":"Method set_name()","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"Sets name DAG, needed change initializing","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"","code":"ConnectDAG$set_name(name)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"name scalar character name","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"method-set-connect-pin-name-","dir":"Reference","previous_headings":"","what":"Method set_connect_pin_name()","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"Sets name used using dag_write_connect_pin","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"","code":"ConnectDAG$set_connect_pin_name(pin_name = self$name)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"pin_name scalar character name desired required","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"method-plot-","dir":"Reference","previous_headings":"","what":"Method plot()","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"Prints plotly graph DAG's graph","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"","code":"ConnectDAG$plot()"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"method-task-attrs-","dir":"Reference","previous_headings":"","what":"Method task_attrs()","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"Returns character vector DAG tasks' specified attribute","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"","code":"ConnectDAG$task_attrs(task_attr = c(\"guid\", \"name\", \"status\"))"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"task_attr name character attribute return","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"method-tasks-as-df-","dir":"Reference","previous_headings":"","what":"Method tasks_as_df()","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"Returns data.frame tasks added DAG","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"","code":"ConnectDAG$tasks_as_df(revalidate_dag = TRUE)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"revalidate_dag DAG validated returning data.frame?","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"method-execute-","dir":"Reference","previous_headings":"","what":"Method execute()","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"Executes tasks, order, added DAG","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"","code":"ConnectDAG$execute(verbose = FALSE)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"verbose print messages executes tasks?","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"Resets DAG initial state, allowing run ","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"","code":"ConnectDAG$reset()"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"method-evaluate-validity-","dir":"Reference","previous_headings":"","what":"Method evaluate_validity()","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"Determines added tasks form valid DAG, setting `is_valid` field","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"","code":"ConnectDAG$evaluate_validity(verbose = TRUE)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"verbose print message console result?","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"objects class cloneable method.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"","code":"ConnectDAG$clone(deep = FALSE)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectDAG.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a DAG of Connect Tasks — ConnectDAG","text":"deep Whether make deep clone.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":null,"dir":"Reference","previous_headings":"","what":"Class representing a Task published to Connect — ConnectTask","title":"Class representing a Task published to Connect — ConnectTask","text":"Class representing Task published Connect Class representing Task published Connect","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a Task published to Connect — ConnectTask","text":"","code":"task <- ConnectTask$new(   guid = \"1f6c9a82-0177-47fa-a27c-be090b39dca7\",   trigger_rule = \"always\",   connect_server = connectapi::connect() ) task$execute()"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class representing a Task published to Connect — ConnectTask","text":"class validates published content item Posit Connect, allows user render item programatically. Additionally, tasks may set dependencies dependents purposes creating DAG.","code":""},{"path":[]},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Class representing a Task published to Connect — ConnectTask","text":"guid guid content item published Connect name name ContentItem Connect status status task. Possible statuses: Pending, Succeeded, Failed, Skipped trigger_rule rule run task. See connect_task details upstream_tasks list ConnectTask R6 envs dependencies task downstream_tasks list ConnectTask R6 envs dependents task task_graph igraph object task, immediate upstream downstream tasks connect_server Connect R6 env generated connectapi::connect() connect_content_item ContentItem R6 env generated connectapi::content_item() connect_variant TaskVariant R6 env generated connectapi::get_variant_default() connect_rendering VariantRender R6 env generated connectapi::variant_render() app_mode type content rendered Posit Connect","code":""},{"path":[]},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class representing a Task published to Connect — ConnectTask","text":"ConnectTask$new() ConnectTask$print() ConnectTask$reset() ConnectTask$df_row() ConnectTask$set_downstream() ConnectTask$set_upstream() ConnectTask$link_task() ConnectTask$update_task_graph() ConnectTask$plot() ConnectTask$linked_tasks_attrs() ConnectTask$execute() ConnectTask$poll_task() ConnectTask$can_run() ConnectTask$clone()","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class representing a Task published to Connect — ConnectTask","text":"Initializes new ConnectTask","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a Task published to Connect — ConnectTask","text":"","code":"ConnectTask$new(guid, trigger_rule = \"all_success\", connect_server)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a Task published to Connect — ConnectTask","text":"guid scalar character guid content deployed Posit Connect trigger_rule scalar character defines state dependency (upstream) tasks must execute connect_server connect environment connection Connect server","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class representing a Task published to Connect — ConnectTask","text":"Displays summary environment console.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a Task published to Connect — ConnectTask","text":"","code":"ConnectTask$print()"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Class representing a Task published to Connect — ConnectTask","text":"Resets task initial state, read executed","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a Task published to Connect — ConnectTask","text":"","code":"ConnectTask$reset()"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"method-df-row-","dir":"Reference","previous_headings":"","what":"Method df_row()","title":"Class representing a Task published to Connect — ConnectTask","text":"Makes single-row data.frame Task's details. Used ConnectDAG create data.frame linked tasks.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a Task published to Connect — ConnectTask","text":"","code":"ConnectTask$df_row()"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"method-set-downstream-","dir":"Reference","previous_headings":"","what":"Method set_downstream()","title":"Class representing a Task published to Connect — ConnectTask","text":"Sets dependent tasks task","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a Task published to Connect — ConnectTask","text":"","code":"ConnectTask$set_downstream(...)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a Task published to Connect — ConnectTask","text":"... number ConnectTask R6 environments","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"method-set-upstream-","dir":"Reference","previous_headings":"","what":"Method set_upstream()","title":"Class representing a Task published to Connect — ConnectTask","text":"Sets dependency tasks task","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a Task published to Connect — ConnectTask","text":"","code":"ConnectTask$set_upstream(...)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a Task published to Connect — ConnectTask","text":"... number ConnectTask R6 environments","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"method-link-task-","dir":"Reference","previous_headings":"","what":"Method link_task()","title":"Class representing a Task published to Connect — ConnectTask","text":"Adds single ConnectTask link either upstream downstream. used directly. Called internally set_upstream set_downstream methods.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a Task published to Connect — ConnectTask","text":"","code":"ConnectTask$link_task(task, link = c(\"upstream_tasks\", \"downstream_tasks\"))"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a Task published to Connect — ConnectTask","text":"task ConnectTask R6 environment link type link create","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"method-update-task-graph-","dir":"Reference","previous_headings":"","what":"Method update_task_graph()","title":"Class representing a Task published to Connect — ConnectTask","text":"Re-generates task's `task_graph` task linked","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a Task published to Connect — ConnectTask","text":"","code":"ConnectTask$update_task_graph()"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"method-plot-","dir":"Reference","previous_headings":"","what":"Method plot()","title":"Class representing a Task published to Connect — ConnectTask","text":"Visualizes task's `task_graph`","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a Task published to Connect — ConnectTask","text":"","code":"ConnectTask$plot()"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"method-linked-tasks-attrs-","dir":"Reference","previous_headings":"","what":"Method linked_tasks_attrs()","title":"Class representing a Task published to Connect — ConnectTask","text":"Returns list linked tasks' attributes","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a Task published to Connect — ConnectTask","text":"","code":"ConnectTask$linked_tasks_attrs(   link = c(\"both\", \"upstream_tasks\", \"downstream_tasks\"),   task_attr = c(\"guid\", \"name\", \"status\") )"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a Task published to Connect — ConnectTask","text":"link type link use search tasks task_attr name attribute return","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"method-execute-","dir":"Reference","previous_headings":"","what":"Method execute()","title":"Class representing a Task published to Connect — ConnectTask","text":"Executes ConnectTask remote Connect Server","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a Task published to Connect — ConnectTask","text":"","code":"ConnectTask$execute(verbose = FALSE)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a Task published to Connect — ConnectTask","text":"verbose task print messages executes?","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"method-poll-task-","dir":"Reference","previous_headings":"","what":"Method poll_task()","title":"Class representing a Task published to Connect — ConnectTask","text":"wrapper around connectapi::poll_task task's execution","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a Task published to Connect — ConnectTask","text":"","code":"ConnectTask$poll_task(verbose = FALSE)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a Task published to Connect — ConnectTask","text":"verbose task print messages executes?","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"method-can-run-","dir":"Reference","previous_headings":"","what":"Method can_run()","title":"Class representing a Task published to Connect — ConnectTask","text":"Returns logical indicating task can run based `trigger_rule`","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a Task published to Connect — ConnectTask","text":"","code":"ConnectTask$can_run()"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class representing a Task published to Connect — ConnectTask","text":"objects class cloneable method.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Class representing a Task published to Connect — ConnectTask","text":"","code":"ConnectTask$clone(deep = FALSE)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/ConnectTask.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class representing a Task published to Connect — ConnectTask","text":"deep Whether make deep clone.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":null,"dir":"Reference","previous_headings":"","what":"Class simulating a ConnectTask — SimTask","title":"Class simulating a ConnectTask — SimTask","text":"Class simulating ConnectTask Class simulating ConnectTask","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class simulating a ConnectTask — SimTask","text":"","code":"sim_task <- SimTask$new(\"task0\", \"always\", 0) sim_task$execute()"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class simulating a ConnectTask — SimTask","text":"class simulates ConnectTask running ConnectDAG. inherited ConnectTask, differences `new()` `execute_task()` methods. However, using SimTask, attempt made validate content published Posit Connect. Additionally, may control probability task fail. allows simulate DAG specific scenarios. class used heavily tests desirable force upstream task failure.","code":""},{"path":[]},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Class simulating a ConnectTask — SimTask","text":"connectapi.dag::ConnectTask -> SimTask","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Class simulating a ConnectTask — SimTask","text":"fail_prob numeric 0 1, determining chance failure","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class simulating a ConnectTask — SimTask","text":"connectapi.dag::ConnectTask$can_run() connectapi.dag::ConnectTask$df_row() connectapi.dag::ConnectTask$link_task() connectapi.dag::ConnectTask$linked_tasks_attrs() connectapi.dag::ConnectTask$plot() connectapi.dag::ConnectTask$poll_task() connectapi.dag::ConnectTask$print() connectapi.dag::ConnectTask$reset() connectapi.dag::ConnectTask$set_downstream() connectapi.dag::ConnectTask$set_upstream() connectapi.dag::ConnectTask$update_task_graph()","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class simulating a ConnectTask — SimTask","text":"SimTask$new() SimTask$execute() SimTask$clone()","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class simulating a ConnectTask — SimTask","text":"Initializes new SimTask","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class simulating a ConnectTask — SimTask","text":"","code":"SimTask$new(guid, trigger_rule = \"all_success\", fail_prob = 0.2)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class simulating a ConnectTask — SimTask","text":"guid scalar character guid content item. validated Posit Connect. trigger_rule scalar character defines state dependency (upstream) tasks must execute fail_prob numeric 0 1, determining chance failure","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":"method-execute-","dir":"Reference","previous_headings":"","what":"Method execute()","title":"Class simulating a ConnectTask — SimTask","text":"Simulates execution task, taking account failure probability","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class simulating a ConnectTask — SimTask","text":"","code":"SimTask$execute(verbose = FALSE)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class simulating a ConnectTask — SimTask","text":"verbose task print messages executes?","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class simulating a ConnectTask — SimTask","text":"objects class cloneable method.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class simulating a ConnectTask — SimTask","text":"","code":"SimTask$clone(deep = FALSE)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/SimTask.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class simulating a ConnectTask — SimTask","text":"deep Whether make deep clone.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/connect_dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a DAG to orchestrate Connect Tasks — connect_dag","title":"Create a DAG to orchestrate Connect Tasks — connect_dag","text":"Connect Directed Acyclic Graph (DAG) sequence tasks execute Posit Connect. Use function link tasks together single DAG. DAGs may executed, orchestrate connect tasks.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/connect_dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a DAG to orchestrate Connect Tasks — connect_dag","text":"","code":"connect_dag(..., name = \"new_dag\")"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/connect_dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a DAG to orchestrate Connect Tasks — connect_dag","text":"... Connect Tasks add graph name personalized name DAG","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/connect_dag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a DAG to orchestrate Connect Tasks — connect_dag","text":"ConnectDAG R6 environment","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/connect_dag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a DAG to orchestrate Connect Tasks — connect_dag","text":"","code":"task0 <- connect_task(\"task0\", simulated = TRUE) task1 <- connect_task(\"task1\", simulated = TRUE) task0 |> set_downstream(task1)  my_dag <- connect_dag(name = \"my_dag\", task0, task1) my_dag #> ConnectDAG:  #>   Name: my_dag  #>   Is Valid: TRUE  #>   Pin Name: my_dag  #>   Tasks: 2  #>                 guid  name  status trigger_rule exec_order #>      simulated_task0 task0 Pending  all_success          1 #>      simulated_task1 task1 Pending  all_success          2"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/connect_task.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a new ConnectTask object — connect_task","title":"Creates a new ConnectTask object — connect_task","text":"function generates R6 class ConnectTask object. object methods add dependency dependent tasks. tasks added ConnectDag may executed.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/connect_task.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a new ConnectTask object — connect_task","text":"","code":"connect_task(   guid,   trigger_rule = trigger_options,   server = Sys.getenv(paste0(prefix, \"_SERVER\"), NA_character_),   api_key = Sys.getenv(paste0(prefix, \"_API_KEY\"), NA_character_),   prefix = \"CONNECT\",   simulated = FALSE )"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/connect_task.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a new ConnectTask object — connect_task","text":"guid scalar character guid content deployed Posit Connect trigger_rule scalar character defines state dependency (upstream) tasks must execute. See details. server URL accessing Posit Connect. Defaults environment variable CONNECT_SERVER api_key API Key authenticate Posit Connect . Defaults environment variable CONNECT_API_KEY prefix prefix used determine environment variables simulated simulated connect task validate connect server executes connect jobs","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/connect_task.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a new ConnectTask object — connect_task","text":"ConnectTask R6 Environment","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/connect_task.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a new ConnectTask object — connect_task","text":"can make tasks dependency tasks using set_upstream. make tasks dependents, use set_downstream. Trigger rules allow define conditions upstream tasks required order execute task. default, `all_success` used, requiring upstream tasks complete evaluation successfully order execute. task meet trigger rule requirement, task skipped. task trigger rules evaluate immediate upstream tasks. tasks upstream immediate upstream tasks statuses considered. following trigger rules available: \"all_success\" upstream tasks executed successfully. \"all_failed\" upstream tasks failed execution. \"all_skipped\" upstream tasks skipped execution. \"all_done\" upstream tasks completed evaluation. includes skipped tasks. \"one_success\" least one upstream task executed successfully. \"one_failed\" least one upstream task failed execution. \"one_done\" least one upstream task completed evaluation. includes skipped tasks. \"none_failed\" upstream tasks failed. upstream tasks completed evaluation. \"none_skipped\" upstream tasks skipped. upstream tasks completed evaluation. \"always\" Task always run regardless upstream task statuses.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/connect_task.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a new ConnectTask object — connect_task","text":"","code":"task0 <- connect_task(\"task1\", trigger_rule = \"all_done\", simulated = TRUE) task0 #> ConnectTask:  #>   GUID: simulated_task1  #>   Name: task1  #>   Trigger Rule: all_done  #>   App Mode: simulation  #>   Status: Pending  #>   Upstream Tasks: 0  #>   Downstream Tasks: 0"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_add_tasks.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Tasks to a DAG — dag_add_tasks","title":"Add Tasks to a DAG — dag_add_tasks","text":"Adds ConnectTask environments existing ConnectDAG","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_add_tasks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Tasks to a DAG — dag_add_tasks","text":"","code":"dag_add_tasks(env, ...)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_add_tasks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Tasks to a DAG — dag_add_tasks","text":"env ConnectDAG R6 environment created connect_dag ... number ConnectTask R6 environments created connect_task","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_add_tasks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Tasks to a DAG — dag_add_tasks","text":"","code":"task0 <- connect_task(\"task0\", simulated = TRUE) task1 <- connect_task(\"task1\", simulated = TRUE) task0 |> set_downstream(task1)  my_dag <-   connect_dag() |>   dag_add_tasks(task0, task1)  dag_run(my_dag)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_as_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Return DAG tasks as a data.frame — dag_as_df","title":"Return DAG tasks as a data.frame — dag_as_df","text":"Creates data.frame tasks added DAG. Includes execution order tasks DAG valid.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_as_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return DAG tasks as a data.frame — dag_as_df","text":"","code":"dag_as_df(env)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_as_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return DAG tasks as a data.frame — dag_as_df","text":"env ConnectDAG R6 environment created connect_dag","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_as_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return DAG tasks as a data.frame — dag_as_df","text":"data.frame","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_as_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return DAG tasks as a data.frame — dag_as_df","text":"","code":"task0 <- connect_task(\"task0\", simulated = TRUE) task1 <- connect_task(\"task1\", simulated = TRUE) task0 |> set_downstream(task1)  my_dag <- connect_dag(name = \"my_dag\", task0, task1) dag_as_df(my_dag) #>              guid  name  status trigger_rule exec_order #> 1 simulated_task0 task0 Pending  all_success          1 #> 2 simulated_task1 task1 Pending  all_success          2"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_integration.html","id":null,"dir":"Reference","previous_headings":"","what":"DAG functions integration validation — dag_integration","title":"DAG functions integration validation — dag_integration","text":"Validates functional workflow declaring dags","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_integration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DAG functions integration validation — dag_integration","text":"","code":"dag_integration()"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_plotly.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize a ConnectDAG graph with plotly — dag_plotly","title":"Visualize a ConnectDAG graph with plotly — dag_plotly","text":"Create interactive plotly visual DAG. function exported. called internally ConnectDAG class using `plot` method.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_plotly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize a ConnectDAG graph with plotly — dag_plotly","text":"","code":"dag_plotly(connect_dag)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_plotly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize a ConnectDAG graph with plotly — dag_plotly","text":"connect_dag ConnectDAG R6 environment","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_plotly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize a ConnectDAG graph with plotly — dag_plotly","text":"plotly graph","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_plotly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize a ConnectDAG graph with plotly — dag_plotly","text":"","code":"task0 <- connect_task(\"task0\", simulated = TRUE) task1 <- connect_task(\"task1\", simulated = TRUE) task0 |> set_downstream(task1)  my_dag <- connect_dag(task0, task1) plot(my_dag)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_remove_task.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a task from a DAG — dag_remove_task","title":"Remove a task from a DAG — dag_remove_task","text":"Removes specified ConnectTask environment ConnectDAG environment.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_remove_task.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a task from a DAG — dag_remove_task","text":"","code":"dag_remove_task(env, task)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_remove_task.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a task from a DAG — dag_remove_task","text":"env ConnectDAG R6 environment created connect_dag task connectTask R6 environment created connect_task","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_remove_task.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a task from a DAG — dag_remove_task","text":"","code":"task0 <- connect_task(\"task0\", simulated = TRUE) task1 <- connect_task(\"task1\", simulated = TRUE)  my_dag <-   connect_dag() |>   dag_add_tasks(task0, task1)  my_dag |> dag_remove_task(task1) #> No tasks are linked in the graph. #> ConnectDAG:  #>   Name: new_dag  #>   Is Valid: FALSE  #>   Pin Name: new_dag  #>   Tasks: 1  #>                 guid  name  status trigger_rule exec_order #>      simulated_task0 task0 Pending  all_success         NA my_dag$tasks #> [[1]] #> ConnectTask:  #>   GUID: simulated_task0  #>   Name: task0  #>   Trigger Rule: all_success  #>   App Mode: simulation  #>   Status: Pending  #>   Upstream Tasks: 0  #>   Downstream Tasks: 0  #>"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset a DAG to its initial state — dag_reset","title":"Reset a DAG to its initial state — dag_reset","text":"DAG run tasks, completed state, use function set state back initial state run clean DAG.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset a DAG to its initial state — dag_reset","text":"","code":"dag_reset(env)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_reset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset a DAG to its initial state — dag_reset","text":"env ConnectDAG R6 environment created connect_dag","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_reset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reset a DAG to its initial state — dag_reset","text":"DAG run, DAG tasks also update internal states. Resetting DAG also reset every task initial state. , DAG reset initial state. ensures dag_run used, tasks executed expected. extremely important using persistently saved DAGs, dag_write_connect_pin","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_reset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset a DAG to its initial state — dag_reset","text":"","code":"task0 <- connect_task(\"task0\", simulated = TRUE) task1 <- connect_task(\"task1\", simulated = TRUE) task0 |> set_downstream(task1)  my_dag <- connect_dag(name = \"my_dag\", task0, task1) dag_run(my_dag)  dag_reset(my_dag) #> ConnectDAG:  #>   Name: my_dag  #>   Is Valid: TRUE  #>   Pin Name: my_dag  #>   Tasks: 2  #>                 guid  name  status trigger_rule exec_order #>      simulated_task0 task0 Pending  all_success          1 #>      simulated_task1 task1 Pending  all_success          2"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run orchestrated ConnectTasks — dag_run","title":"Run orchestrated ConnectTasks — dag_run","text":"Executes Posit Connect Tasks sequentially, ensuring dependency tasks run dependents.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run orchestrated ConnectTasks — dag_run","text":"","code":"dag_run(env, verbose = FALSE)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run orchestrated ConnectTasks — dag_run","text":"env ConnectDAG R6 environment created connect_dag verbose boolean, TRUE prints messages console tasks execute","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run orchestrated ConnectTasks — dag_run","text":"","code":"task0 <- connect_task(\"task0\", simulated = TRUE) task1 <- connect_task(\"task1\", simulated = TRUE) task0 |> set_downstream(task1)  my_dag <- connect_dag(name = \"my_dag\", task0, task1) dag_run(my_dag)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_set_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the name of a DAG — dag_set_name","title":"Set the name of a DAG — dag_set_name","text":"DAG names used identifiers DAG using pins.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_set_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the name of a DAG — dag_set_name","text":"","code":"dag_set_name(env, name)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_set_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the name of a DAG — dag_set_name","text":"env ConnectDAG R6 environment created connect_dag name scalar character name want set DAG","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_set_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the name of a DAG — dag_set_name","text":"","code":"my_dag <-   connect_dag() |>   dag_set_name(\"My Awesome DAG\") #> Warning: Pins only allows alphanumeric characters, dashes, and underscores in application names. My-Awesome-DAG will be used instead when writing to a pin board. Use dag_set_pin_name() to overwrite this name.  print(my_dag) #> No tasks are linked in the graph. #> ConnectDAG:  #>   Name: My Awesome DAG  #>   Is Valid: FALSE  #>   Pin Name: My-Awesome-DAG  #>   Tasks: 0  #>     [1] guid         name         status       trigger_rule exec_order   #>     <0 rows> (or 0-length row.names)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_set_pin_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the Pin name for Connect Board — dag_set_pin_name","title":"Sets the Pin name for Connect Board — dag_set_pin_name","text":"using package's built-features `pins` package, ConnectDAG's pin_name used write Connect Board. function allows overwrite default name given Pin Name. default pin name ConnectDAG's name, substitute invalid pin name characters hyphen. Note using `dag_set_name()` also change pin name.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_set_pin_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the Pin name for Connect Board — dag_set_pin_name","text":"","code":"dag_set_pin_name(env, pin_name)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_set_pin_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the Pin name for Connect Board — dag_set_pin_name","text":"env ConnectDAG R6 environment created connect_dag pin_name scalar character want use pin name","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_set_pin_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the Pin name for Connect Board — dag_set_pin_name","text":"","code":"my_dag <- connect_dag(name = \"my_dag\") my_dag |> dag_set_pin_name(\"pinned_dag_name\") #> No tasks are linked in the graph. #> ConnectDAG:  #>   Name: my_dag  #>   Is Valid: FALSE  #>   Pin Name: pinned_dag_name  #>   Tasks: 0  #>     [1] guid         name         status       trigger_rule exec_order   #>     <0 rows> (or 0-length row.names)  my_dag$pin_name #> [1] \"pinned_dag_name\""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validates a ConnectDAG is complete and can be executed — dag_validate","title":"Validates a ConnectDAG is complete and can be executed — dag_validate","text":"valid ConnectDAG tasks linked single network (islands), [graph] DAG. DAG valid generate warning message reason.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validates a ConnectDAG is complete and can be executed — dag_validate","text":"","code":"dag_validate(env, verbose = TRUE)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validates a ConnectDAG is complete and can be executed — dag_validate","text":"env ConnectDAG R6 environment verbose logical, TRUE (default) message print console valid","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validates a ConnectDAG is complete and can be executed — dag_validate","text":"boolean indicating valid ","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validates a ConnectDAG is complete and can be executed — dag_validate","text":"","code":"task1 <- connect_task(\"task1\", simulated = TRUE) task2 <- connect_task(\"task2\", simulated = TRUE) task1 |> set_downstream(task2)  my_dag <- connect_dag(task1, task2) dag_validate(my_dag) #> DAG is valid! #> ConnectDAG:  #>   Name: new_dag  #>   Is Valid: TRUE  #>   Pin Name: new_dag  #>   Tasks: 2  #>                 guid  name  status trigger_rule exec_order #>      simulated_task1 task1 Pending  all_success          1 #>      simulated_task2 task2 Pending  all_success          2"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_write_connect_pin.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a DAG as a Pin to Posit Connect — dag_write_connect_pin","title":"Save a DAG as a Pin to Posit Connect — dag_write_connect_pin","text":"Uses `pins` package save DAG Connect Board. Pinned DAGs can easily loaded run scheduled jobs.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_write_connect_pin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a DAG as a Pin to Posit Connect — dag_write_connect_pin","text":"","code":"dag_write_connect_pin(   env,   additional_tags = NA_character_,   pin_title = paste(env$name, \"connectapi.dag\"),   pin_description = NA_character_,   ... )"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_write_connect_pin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a DAG as a Pin to Posit Connect — dag_write_connect_pin","text":"env ConnectDAG R6 environment created connect_dag additional_tags character vector tags include pin. \"DAG\" always applied. pin_title Passed pins::pin_write(title) pin_description Passed pins::pin_write(description) ... arguments passed board_connect","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_write_connect_pin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save a DAG as a Pin to Posit Connect — dag_write_connect_pin","text":"created DAG local R environment, need save ConnectDAG R6 environment deployed environment (Posit Connect) want schedule Posit Connect run. dag saved, can quickly create deploy-able schedule-able Rmd file using dag_write_rmd. DAG runs, can saved using function. default, function versions pin written. allows load specific instances DAG runs, evaluate ran. versions pin serve effective log DAG run attempts. Since DAG contains ConnectTask environments well, can see full snapshot DAG run, task statuses resulted end DAG execution.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_write_connect_pin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a DAG as a Pin to Posit Connect — dag_write_connect_pin","text":"","code":"if (FALSE) { task0 <- connect_task(\"task0\", simulated = TRUE) task1 <- connect_task(\"task1\", simulated = TRUE) task0 |> set_downstream(task1)  my_dag <- connect_dag(name = \"my_dag\", task0, task1) dag_write_connect_pin(my_dag) }"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_write_rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a deployable Rmd file for a ConnectDAG — dag_write_rmd","title":"Write a deployable Rmd file for a ConnectDAG — dag_write_rmd","text":"Create Rmd file can deploy Posit Connect run pinned DAG. may edit aspects file, instance different `board_connect()` parameters default.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_write_rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a deployable Rmd file for a ConnectDAG — dag_write_rmd","text":"","code":"dag_write_rmd(   env,   pin_name = env$pin_name,   file = paste0(env$pin_name, \"_job\", \".Rmd\"),   ... )"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_write_rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a deployable Rmd file for a ConnectDAG — dag_write_rmd","text":"env ConnectDAG R6 environment created connect_dag pin_name scalar character name pin Connect Board file name file generated ... Arguments passed board_connect","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_write_rmd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a deployable Rmd file for a ConnectDAG — dag_write_rmd","text":"attempting write Rmd file, function checks pin actually exists. Parameters passed `...` pass `pins::board_connect()` able check. Beyond , function use connection board. generated Rmd file contains 3 code chunks: _setup_, _run-dag_, _save_. First, environment set loads necessary packages reads ConnectDAG environment pin. , runs dag, resetting state DAG running. Lastly, saves new version DAG back Connect Pin. _setup_ chunk, connection board made using pins package. may need modify code work environment using anything defaults `pins::board_connect()`. _run-dag_ chunk, need modify anything. simply reset task statuses execute DAG tasks. _save_ chunk, overwriting DAG Connect Pin, versioned. may also need modify parameters `connectapi.dag::dag_write_connect_pin()` using anything defaults. DAG also contains state information tasks DAG DAG finishes executing. versions keep working history DAG's run, allowing load previous versions DAG.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/dag_write_rmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a deployable Rmd file for a ConnectDAG — dag_write_rmd","text":"","code":"if (FALSE) { task0 <- connect_task(\"task0\", simulated = TRUE) task1 <- connect_task(\"task1\", simulated = TRUE) task0 |> set_downstream(task1)  my_dag <- connect_dag(name = \"my_dag\", task0, task1) dag_write_connect_pin(my_dag)  dag_write_rmd(my_dag) }"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/set_downstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets dependent task(s) for a given ConnecTask — set_downstream","title":"Sets dependent task(s) for a given ConnecTask — set_downstream","text":"Tasks downstream given Connect Task execute provided ConnectTask. task linked downstream task, downstream task also creates upstream link provided task.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/set_downstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets dependent task(s) for a given ConnecTask — set_downstream","text":"","code":"set_downstream(env, ...)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/set_downstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets dependent task(s) for a given ConnecTask — set_downstream","text":"env ConnectTask environment generated connect_task want set downstream/dependent tasks . ... ConnectTasks make downstream `env`","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/set_downstream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets dependent task(s) for a given ConnecTask — set_downstream","text":"return anything, modified ConnecTask Environment -place","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/set_downstream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets dependent task(s) for a given ConnecTask — set_downstream","text":"","code":"task0 <- connect_task(\"task0\", simulated = TRUE) task1 <- connect_task(\"task1\", simulated = TRUE) task2 <- connect_task(\"task2\", simulated = TRUE)  task0 |> set_downstream(task1, task2) plot(task0)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/set_upstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets dependency task(s) for a given ConnecTask — set_upstream","title":"Sets dependency task(s) for a given ConnecTask — set_upstream","text":"Tasks upstream given Connect Task must complete evaluation task runs. task linked upstream task, upstream task also creates downstream link provided task.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/set_upstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets dependency task(s) for a given ConnecTask — set_upstream","text":"","code":"set_upstream(env, ...)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/set_upstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets dependency task(s) for a given ConnecTask — set_upstream","text":"env ConnectTask environment generated connect_task want set upstream/dependency tasks . ... ConnectTasks make upstream `env`","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/set_upstream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets dependency task(s) for a given ConnecTask — set_upstream","text":"return anything, modified ConnecTask Environment -place","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/set_upstream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets dependency task(s) for a given ConnecTask — set_upstream","text":"","code":"task0 <- connect_task(\"task0\", simulated = TRUE) task1 <- connect_task(\"task1\", simulated = TRUE) task2 <- connect_task(\"task2\", simulated = TRUE)  task2 |> set_upstream(task0, task1) plot(task2)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/sim_task.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Connect Task — sim_task","title":"Simulate a Connect Task — sim_task","text":"Simulates connect task evaluation, optional probability task fail. full list available trigger rules, refer connect_task.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/sim_task.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Connect Task — sim_task","text":"","code":"sim_task(guid, trigger_rule = \"all_success\", fail_prob = 0.2)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/sim_task.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Connect Task — sim_task","text":"guid scalar character guid/name task simulate trigger_rule scalar character defines state dependency (upstream) tasks must execute fail_prob value 0 1 probability task failure","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/sim_task.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Connect Task — sim_task","text":"SimTask E6 environment","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/sim_task.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Connect Task — sim_task","text":"","code":"sim_task0 <- sim_task(\"foo\", trigger_rule = \"always\", fail_prob = 0) task_run(sim_task0)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/task_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a single ConnectTask — task_run","title":"Run a single ConnectTask — task_run","text":"Executes ConnectTask, causing content Connect re-render. normally called directly, ConnectDAG use function instead.","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/task_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a single ConnectTask — task_run","text":"","code":"task_run(env, verbose = FALSE)"},{"path":"https://timeddilation.github.io/connectapi.dag/reference/task_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a single ConnectTask — task_run","text":"env ConnectTask R6 environment created connect_task verbose boolean, TRUE prints messages console task executes","code":""},{"path":"https://timeddilation.github.io/connectapi.dag/reference/task_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a single ConnectTask — task_run","text":"","code":"task0 <- connect_task(\"task0\", simulated = TRUE) task_run(task0)"}]
