% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SimTask.R
\name{SimTask}
\alias{SimTask}
\title{Class simulating a ConnectTask}
\description{
Class simulating a ConnectTask

Class simulating a ConnectTask
}
\section{Usage}{

\preformatted{
sim_task <- SimTask$new("task0", "always", 0)
sim_task$execute_task()
}
}

\section{Details}{


This class simulates a ConnectTask running in a ConnectDAG.
It is inherited from ConnectTask, with the only differences being to the
`new()` and `execute_task()` methods.
However, when using a SimTask, no attempt is made to validate the content
is published to Posit Connect.
Additionally, you may control the probability a task will fail.
This allows you to simulate the DAG under specific scenarios.
This class is used heavily in tests when it is desirable to force
an upstream task failure.
}

\seealso{
Other R6 classes: 
\code{\link{ConnectDAG}},
\code{\link{ConnectTask}}
}
\concept{R6 classes}
\section{Super class}{
\code{\link[connectapi.dag:ConnectTask]{connectapi.dag::ConnectTask}} -> \code{SimTask}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{fail_prob}}{A numeric between 0 and 1, determining the chance of a failure}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SimTask-new}{\code{SimTask$new()}}
\item \href{#method-SimTask-execute_task}{\code{SimTask$execute_task()}}
\item \href{#method-SimTask-clone}{\code{SimTask$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="connectapi.dag" data-topic="ConnectTask" data-id="can_run"><a href='../../connectapi.dag/html/ConnectTask.html#method-ConnectTask-can_run'><code>connectapi.dag::ConnectTask$can_run()</code></a></span></li>
<li><span class="pkg-link" data-pkg="connectapi.dag" data-topic="ConnectTask" data-id="df_row"><a href='../../connectapi.dag/html/ConnectTask.html#method-ConnectTask-df_row'><code>connectapi.dag::ConnectTask$df_row()</code></a></span></li>
<li><span class="pkg-link" data-pkg="connectapi.dag" data-topic="ConnectTask" data-id="link_task"><a href='../../connectapi.dag/html/ConnectTask.html#method-ConnectTask-link_task'><code>connectapi.dag::ConnectTask$link_task()</code></a></span></li>
<li><span class="pkg-link" data-pkg="connectapi.dag" data-topic="ConnectTask" data-id="linked_task_names"><a href='../../connectapi.dag/html/ConnectTask.html#method-ConnectTask-linked_task_names'><code>connectapi.dag::ConnectTask$linked_task_names()</code></a></span></li>
<li><span class="pkg-link" data-pkg="connectapi.dag" data-topic="ConnectTask" data-id="plot"><a href='../../connectapi.dag/html/ConnectTask.html#method-ConnectTask-plot'><code>connectapi.dag::ConnectTask$plot()</code></a></span></li>
<li><span class="pkg-link" data-pkg="connectapi.dag" data-topic="ConnectTask" data-id="poll_task"><a href='../../connectapi.dag/html/ConnectTask.html#method-ConnectTask-poll_task'><code>connectapi.dag::ConnectTask$poll_task()</code></a></span></li>
<li><span class="pkg-link" data-pkg="connectapi.dag" data-topic="ConnectTask" data-id="reset"><a href='../../connectapi.dag/html/ConnectTask.html#method-ConnectTask-reset'><code>connectapi.dag::ConnectTask$reset()</code></a></span></li>
<li><span class="pkg-link" data-pkg="connectapi.dag" data-topic="ConnectTask" data-id="set_downstream"><a href='../../connectapi.dag/html/ConnectTask.html#method-ConnectTask-set_downstream'><code>connectapi.dag::ConnectTask$set_downstream()</code></a></span></li>
<li><span class="pkg-link" data-pkg="connectapi.dag" data-topic="ConnectTask" data-id="set_upstream"><a href='../../connectapi.dag/html/ConnectTask.html#method-ConnectTask-set_upstream'><code>connectapi.dag::ConnectTask$set_upstream()</code></a></span></li>
<li><span class="pkg-link" data-pkg="connectapi.dag" data-topic="ConnectTask" data-id="update_task_graph"><a href='../../connectapi.dag/html/ConnectTask.html#method-ConnectTask-update_task_graph'><code>connectapi.dag::ConnectTask$update_task_graph()</code></a></span></li>
<li><span class="pkg-link" data-pkg="connectapi.dag" data-topic="ConnectTask" data-id="upstream_task_statuses"><a href='../../connectapi.dag/html/ConnectTask.html#method-ConnectTask-upstream_task_statuses'><code>connectapi.dag::ConnectTask$upstream_task_statuses()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SimTask-new"></a>}}
\if{latex}{\out{\hypertarget{method-SimTask-new}{}}}
\subsection{Method \code{new()}}{
Initializes a new SimTask
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimTask$new(guid, trigger_rule = "all_success", fail_prob = 0.2)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{guid}}{A scalar character of the guid for the content item. Not validated in Posit Connect.}

\item{\code{trigger_rule}}{A scalar character that defines state of dependency (upstream) tasks must be in to execute}

\item{\code{fail_prob}}{A numeric between 0 and 1, determining the chance of a failure}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SimTask-execute_task"></a>}}
\if{latex}{\out{\hypertarget{method-SimTask-execute_task}{}}}
\subsection{Method \code{execute_task()}}{
Simulates the execution of task, taking into account failure probability
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimTask$execute_task(verbose = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{Should the task print messages as it executes?}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SimTask-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SimTask-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimTask$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
